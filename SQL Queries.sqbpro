<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="D:/manu acu/p/course content/Week 37 - SQL project/Part 1/New Orders.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="150"/><column_width id="3" width="1901"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="ADDRESS" custom_title="0" dock_id="1" table="4,7:mainADDRESS"/><dock_state state="000000ff00000000fd0000000100000002000005c000000362fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000005c0000001a400ffffff000005c00000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="" name="" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths/><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="119"/><column index="2" value="300"/><column index="3" value="300"/><column index="4" value="170"/><column index="5" value="147"/><column index="6" value="87"/><column index="7" value="96"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ONLINE_CUSTOMER" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="133"/><column index="2" value="171"/><column index="3" value="171"/><column index="4" value="270"/><column index="5" value="171"/><column index="6" value="119"/><column index="7" value="256"/><column index="8" value="206"/><column index="9" value="182"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PRODUCT" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="122"/><column index="2" value="300"/><column index="3" value="210"/><column index="4" value="154"/><column index="5" value="252"/><column index="6" value="51"/><column index="7" value="70"/><column index="8" value="76"/><column index="9" value="80"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PRODUCT_CLASS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="210"/><column index="2" value="231"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*1. Write a query to Display the product details (product_class_code, product_id, product_desc,
product_price,) as per the following criteria and sort them in descending order of category:
a. If the category is 2050, increase the price by 2000
b. If the category is 2051, increase the price by 500
c. If the category is 2052, increase the price by 600.*/

SELECT product_class_code,product_id,product_desc,
CASE WHEN product_class_code =2050 THEN (product_price+2000)
	WHEN product_class_code = 2051 THEN (product_price+500)
	WHEN product_class_code = 2052 THEN (product_price+600)
	ELSE product_price 
END as MODI_PROD_PRICE
FROM product 
ORDER by product_class_code DESC;



/* 2. Write a query to display (product_class_desc, product_id, product_desc,
product_quantity_avail ) and Show inventory status of products as below as per their
available quantity:
a. For Electronics and Computer categories, if available quantity is &lt;= 10, show 'Low
stock', 11 &lt;= qty &lt;= 30, show 'In stock', &gt;= 31, show 'Enough stock'
b. For Stationery and Clothes categories, if qty &lt;= 20, show 'Low stock', 21 &lt;= qty &lt;=
80, show 'In stock', &gt;= 81, show 'Enough stock'
c. Rest of the categories, if qty &lt;= 15 – 'Low Stock', 16 &lt;= qty &lt;= 50 – 'In Stock', &gt;= 51 –
'Enough stock'
For all categories, if available quantity is 0, show 'Out of
stock'. */

SELECT PRODUCT_CLASS_DESC, PRODUCT_ID, PRODUCT_DESC,PRODUCT_QUANTITY_AVAIL,
CASE WHEN PRODUCT_QUANTITY_AVAIL = 0 THEN 'OUT OF STOCK'
	ELSE
	CASE WHEN (PRODUCT_CLASS_DESC = 'Electronics' or PRODUCT_CLASS_DESC= 'Computer') THEN
		CASE WHEN PRODUCT_QUANTITY_AVAIL &lt;= 10 THEN 'LOW STOCK'
			 WHEN PRODUCT_QUANTITY_AVAIL BETWEEN 10 AND 30 THEN 'IN STOCK'
			 ELSE 'ENOUGH STOCK'
		END	 
	WHEN (PRODUCT_CLASS_DESC = 'Stationery' or PRODUCT_CLASS_DESC= 'Clothes') THEN
      CASE WHEN PRODUCT_QUANTITY_AVAIL &lt;= 20 THEN 'LOW STOCK'
		     WHEN PRODUCT_QUANTITY_AVAIL BETWEEN 20 AND 80 THEN 'IN STOCK'
			 ELSE ' ENOUGH STOCK'
	    END 		
	ELSE
      	CASE WHEN PRODUCT_QUANTITY_AVAIL &lt;= 15 THEN 'LOW STOCK'
		     WHEN PRODUCT_QUANTITY_AVAIL BETWEEN 15 AND 50 THEN 'IN STOCK'
			 ELSE ' ENOUGH STOCK'
		END
	END
END AS 'INVENTORY STATUS'
FROM product p, PRODUCT_CLASS c
WHERE p.PRODUCT_CLASS_CODE = c.PRODUCT_CLASS_CODE;
/* Write a query to Show the count of cities in all countries other than USA &amp; MALAYSIA, with more
than 1 city, in the descending order of CITIES. (2 rows) [NOTE: ADDRESS TABLE, Do not use
Distinct]*/

SELECT COUNTRY, CITY, count(city) FROM ADDRESS
WHERE COUNTRY NOT in ('USA','Malaysia')
GROUP by COUNTRY
HAVING count (CITY)&gt;1;

/* 4. Write a query to display the customer_id,customer full name ,city,pincode,and order details (order
id,order date, product class desc, product desc, subtotal(product_quantity * product_price)) for
orders shipped to cities whose pin codes do not have any 0s in them. Sort the output on customer
name, order date and subtotal. (52 ROWS)
[NOTE: TABLE TO BE USED - online_customer, address, order_header, order_items,
product, product_class]*/

SELECT c.CUSTOMER_ID, 
       c.CUSTOMER_FNAME,
	   a.CITY,
	   a.PINCODE,
	   o.ORDER_ID,
	   o.ORDER_DATE,
	   pc.PRODUCT_CLASS_DESC, 
	   p.PRODUCT_DESC,
       (i.PRODUCT_QUANTITY*p.PRODUCT_PRICE) as SUB_Amount
FROM ONLINE_CUSTOMER c, ADDRESS a, ORDER_HEADER o, ORDER_ITEMS i, PRODUCT p, PRODUCT_CLASS pc
WHERE (c.CUSTOMER_ID=o.CUSTOMER_ID)
AND (c.ADDRESS_ID=a.ADDRESS_ID)
AND (o.ORDER_ID=i.ORDER_ID)
AND (i.PRODUCT_ID=p.PRODUCT_ID)
AND (p.PRODUCT_CLASS_CODE=pc.PRODUCT_CLASS_CODE)
AND  CAST (a.PINCODE as varchar(10)) not like '%0%'
AND o.ORDER_STATUS = 'Shipped'
ORDER by c.CUSTOMER_FNAME,o.ORDER_DATE,SUB_Amount;

/* 5. Write a Query to display product id,product description,totalquantity(sum(product quantity)
for an item which has been bought maximum no. of times along with product id 201.
(USE SUB-QUERY) (1 ROW) [NOTE: ORDER_ITEMS TABLE, PRODUCT TABLE]*/
SELECT p.PRODUCT_ID, p.PRODUCT_DESC,
		MAX(SQT.production_frequency) as Total_Quantity
		
FROM PRODUCT p, (SELECT PRODUCT_ID,
				SUM(PRODUCT_QUANTITY) as production_frequency
				FROM ORDER_ITEMS
				WHERE ORDER_ID in (SELECT ORDER_ID FROM ORDER_ITEMS WHERE PRODUCT_ID = 201)
				AND PRODUCT_ID!=201
				GROUP by PRODUCT_ID) as SQT
WHERE SQT.PRODUCT_ID = p.PRODUCT_ID;


/*6. Write a query to display the customer_id,customer name, email and order details (order id,
product desc,product qty, subtotal(product_quantity * product_price)) for all customers
even if they have not ordered any item.(225 ROWS)
[NOTE: TABLE TO BE USED - online_customer, order_header, order_items, product]*/
SELECT c.CUSTOMER_ID, c.CUSTOMER_FNAME, c.CUSTOMER_EMAIL, o.ORDER_ID,p.PRODUCT_DESC,
		i.PRODUCT_QUANTITY, 
		(i.PRODUCT_QUANTITY * p.PRODUCT_PRICE) as TOTAL_AMOUNT
FROM ONLINE_CUSTOMER c
LEFT JOIN ORDER_HEADER o on c.CUSTOMER_ID = o.CUSTOMER_ID
LEFT JOIN ORDER_ITEMS i on	o.ORDER_ID = i.ORDER_ID
LEFT JOIN PRODUCT p on i.PRODUCT_ID = p.PRODUCT_ID;
		

</sql><current_tab id="0"/></tab_sql></sqlb_project>
